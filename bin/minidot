#!/usr/bin/env bash

## subs
usage(){
cat <<EOF
Usage:
  minidot [OPTS] FASTA [FASTA ..]

Compute and plot dotplots.
  -o  output prefix [minidot]
  -M  mapper pass-through options, quote!
  -m  mapper [minimap]

single FASTA: run all-vs-all sequences.
multiple FASTA: run all-vs-all FASTA.

EOF
exit 0;
}

check_bin(){
    if [[ $1 == */* ]]; then
        [ -x $1 ] || { echo "$1 not found or executable" >&2; exit 1; }
    else
        hash $1 || { echo "$1 required in PATH" >&2; exit 1; }
    fi;
    echo $1 .. ok
}

# parse args
[[ -z $1 ]] && usage;

# get dir
# ugly, but it works for Brian in the bbmap package
pushd . > /dev/null
DIR="${BASH_SOURCE[0]}"
while [ -h "$DIR" ]; do
  cd "$(dirname "$DIR")"
  DIR="$(readlink "$(basename "$DIR")")"
done
cd "$(dirname "$DIR")"
DIR="$(pwd)/"
popd > /dev/null

# TODO: read opts
MBIN=minimap
MOPT='-g 100 -k 12 -w 5' # TODO: reset if not minimap
OPRE=minidot

# check_bin
check_bin $MBIN
check_bin samtools

# files
PAF=$PRE.paf
TFA=$PRE.fa
TLEN=$PRE.len

echo -n '' >$PAF;
echo -n '' >$TFA;
echo -n '' >$TLEN;



if [[ -z $2 ]]; then
    # single fasta - assume one contig per sample
    FA=$1;
    ID=$(basename $FA);
    ID=${ID%.f*};
    samtools faidx $FA; # lengths of contigs
    cut -f 1,2 $FA.fai > $TLEN;
    rm $FA.fai

    echo 'mapping' >&2
    $MBIN $MOPT $1 $1 >> $PAF
else
    # multiple fasta - each file is a sample
    # merge fastas

    for FA in $@; do
        ID=$(basename $FA);
        ID=${ID%.f*};
        # ID=${ID/[:\/]/_}; # need : for split in R
        echo $ID;
        (echo ">$ID"; grep -v '^>' $FA | tr -d '\n' | fold; echo '') >> $TFA;
        samtools faidx $FA; # lengths of contigs
        cut -f 2 $FA.fai | sed 's/.*/'$ID'\t&/' >> $TLEN;
        rm $FA.fai
    done;

    echo 'mapping' >&2
    $MBIN $MOPT $TFA $TFA >> $PAF
fi;

echo 'plotting' >&2;

"$DIR"/../R/minidot.R $PAF $TLEN

echo "plot at $OPRE.pdf"
